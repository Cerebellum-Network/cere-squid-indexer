type Account @entity {
  id: ID!

  cereFreeBalance: BigInt!
  ddcActiveBalance: BigInt!

  ddcBucketsUsage: [DdcCustomerUsage!]! @derivedFrom(field: "accountId")

  ddcBuckets: [DdcBucket!] @derivedFrom(field: "ownerId")
  ddcClusters: [DdcCluster!] @derivedFrom(field: "managerId")
  ddcNodes: [DdcNode!] @derivedFrom(field: "providerId")
}

type DdcCustomerUsage @entity @index(fields: ["blockHeight", "accountId"]) @index(fields: ["blockTimestamp", "accountId"]) {
  # Can't avoid having id column due a lack of support for `PRIMARY KEY("blockHeight", "accountId")`.
  # Expected value is blockHeight || '-' || accountId .
  id: ID!

  blockHeight: Int! @index
  blockTimestamp: DateTime! @index
  accountId: Account! @index

  transferredBytes: BigInt!
  storedBytes: BigInt!
  numberOfPuts: BigInt!
  numberOfGets: BigInt!
}

type DdcCluster @entity {
  id: ID!

  createdAtBlockHeight: Int!

  managerId: Account! @index

  treasuryShare: BigInt!
  validatorsShare: BigInt!
  clusterReserveShare: BigInt!
  storageBondSize: BigInt!
  storageChillDelay: Int!
  storageUnbondingDelay: Int!
  unitPerMbStored: BigInt!
  unitPerMbStreamed: BigInt!
  unitPerPutRequest: BigInt!
  unitPerGetRequest: BigInt!

  erasureCodingRequired: Int!
  erasureCodingTotal: Int!
  replicationTotal: Int!
  status: DdcClusterStatus!

  ddcBuckets: [DdcBucket!] @derivedFrom(field: "clusterId")
  ddcNodes: [DdcNode!] @derivedFrom(field: "clusterId")
}

enum DdcClusterStatus {
  Activated, Bonded, Unbonded, Unbonding
}

type DdcNode @entity {
  id: ID!

  createdAtBlockHeight: Int!

  providerId: Account! @index
  clusterId: DdcCluster

  host: String!
  domain: String
  ssl: Boolean!
  httpPort: Int!
  grpcPort: Int!
  p2pPort: Int!
  mode: DdcNodeMode!

  usage: [DdcNodeUsage!]! @derivedFrom(field: "nodeId")
}

enum DdcNodeMode {
  Storage, Cache, Full, DAC
}

type DdcNodeUsage @entity @index(fields: ["blockHeight", "nodeId"]) @index(fields: ["blockTimestamp", "nodeId"]) {
  # Can't avoid having id column due a lack of support for `PRIMARY KEY("blockHeight", "nodeId")`.
  # Expected value is blockHeight || '-' || nodeId.
  id: ID!

  blockHeight: Int! @index
  blockTimestamp: DateTime! @index
  nodeId: DdcNode! @index

  transferredBytes: BigInt!
  storedBytes: BigInt!
  numberOfPuts: BigInt!
  numberOfGets: BigInt!
}

type DdcBucket @entity @index(fields: ["createdAtBlockTimestamp", "id"]) {
  id: ID!

  createdAtBlockHeight: Int!
  createdAtBlockTimestamp: DateTime @index

  ownerId: Account! @index
  clusterId: DdcCluster! @index

  isPublic: Boolean!
  isRemoved: Boolean!

  usage: [DdcBucketUsage!]! @derivedFrom(field: "bucketId")
}

type DdcBucketUsage @entity @index(fields: ["blockHeight", "bucketId"]) @index(fields: ["blockTimestamp", "bucketId"]) {
  # Can't avoid having id column due a lack of support for `PRIMARY KEY("blockHeight", "bucketId")`.
  # Expected value is blockHeight || '-' || bucketId .
  id: ID!

  blockHeight: Int! @index
  blockTimestamp: DateTime! @index
  bucketId: DdcBucket! @index

  transferredBytes: BigInt!
  storedBytes: BigInt!
  numberOfPuts: BigInt!
  numberOfGets: BigInt!
}
